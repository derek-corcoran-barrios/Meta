,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
Formulas
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(TreatmentType)", "factor(Treatment.2)")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
Formulas
#### Names
Cols <- c("Order", "Functional group", "Treatment Type", "Neonic")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
### Actual models
Meta <- readRDS("Meta2.rds")
library(ggplot2)
library(metafor)
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Abundance, vtype = "UB")
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(TreatmentType)", "factor(Treatment.2)")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
#### Names
Cols <- c("Order", "Functional group", "Treatment Type", "Neonic")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
### Actual models
Meta <- readRDS("Meta2.rds")
library(ggplot2)
library(metafor)
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Abundance, vtype = "UB")
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(TreatmentType)", "factor(Treatment.2)")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
resabund <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
str(resabund)
length(resabund)
#### Names
Cols <- c("Order", "Functional group", "Treatment Type", "Neonic")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
ModelNames
modelAbund <- df <- data.frame(model=character(),
p_value=numeric(),
R_squared=numeric(),
n = numeric()
AICc = numeric()
stringsAsFactors=FALSE)
modelAbund <- df <- data.frame(model=character(),
p_value=numeric(),
R_squared=numeric(),
n = numeric(),
AICc = numeric(),
stringsAsFactors=FALSE)
View(modelAbund)
1:length(resabund)
ModelNames
ModelNames[1]
for (i in 1:length(resabund)){
modelAbund$model[i]<- ModelNames[i]
}
modelAbund <- df <- data.frame(model=NULL,
p_value=NULL,
R_squared=NULL,
n = NULL,
AICc = NULL)
for (i in 1:length(resabund)){
modelAbund$model[i]<- ModelNames[i]
}
modelAbund <- data.frame(model=character(),
p_value=numeric(),
R_squared=numeric(),
n = numeric(),
AICc = numeric(),
stringsAsFactors=FALSE)
for (i in 1:length(resabund)){
modelAbund$model[i]<- ModelNames[i]
}
modelAbund <- data.frame(model=character(),
p_value=numeric(),
R_squared=numeric(),
n = numeric(),
AICc = numeric(),
stringsAsFactors=FALSE)
for (i in 1:length(resabund)){
modelAbund$model[i]<- ModelNames[i]
}
modelAbund <- list()
for (i in 1:length(resabund)){
modelAbund[[i]]$model<- ModelNames[i]
}
for (i in 1:length(resabund)){
print(i)
modelAbund[[i]]$model<- ModelNames[i]
}
modelAbund <- list()
for (i in 1:length(resabund)){
modelAbund[[i][<- ModelNames[i]
}
modelAbund <- list()
for (i in 1:length(resabund)){
modelAbund[[i]]<- ModelNames[i]
}
modelAbund
modelAbund <- list()
for (i in 1:length(resabund)){
modelAbund[[i]]$model<- ModelNames[i]
}
modelAbund <- list()
for (i in 1:length(resabund)){
modelAbund[[i]][,1]<- ModelNames[i]
}
dat <- data.frame(character(3), numeric(3), stringsAsFactors = FALSE)
dat
#   character.3. numeric.3.
# 1                       0
# 2                       0
# 3                       0
for (i in 1:3)
{
dat[i,1]<-as.character("f")
dat[i,2]<-i
}
dat
modelAbund <- data.frame(model = character(length(resabund)), pvalue = numeric(length(resabund)), stringsAsFactors = FALSE)
for (i in 1:length(resabund)){
modelAbund[i,1]<- ModelNames[i]
}
modelAbund
modelAbund <- data.frame(model = character(length(resabund)), pvalue = numeric(length(resabund)), stringsAsFactors = FALSE)
for (i in 1:length(resabund)){
modelAbund[i,1]<- ModelNames[i]
modelAbund[i,2]<- resabund[[i]]$QMp
}
modelAbund
modelAbund <- data.frame(model = character(length(resabund)), pvalue = numeric(length(resabund)), R_squared = numeric(length(resabund)), stringsAsFactors = FALSE)
for (i in 1:length(resabund)){
modelAbund[i,1]<- ModelNames[i]
modelAbund[i,2]<- resabund[[i]]$QMp
modelAbund[i,3]<- round(resabund[[i]]$R2/100,2)
}
modelAbund
modelAbund <- data.frame(model = character(length(resabund)), pvalue = numeric(length(resabund)), R_squared = numeric(length(resabund)), n = numeric(length(resabund)), AICc = numeric(length(resabund)), stringsAsFactors = FALSE)
for (i in 1:length(resabund)){
modelAbund[i,1]<- ModelNames[i]
modelAbund[i,2]<- resabund[[i]]$QMp
modelAbund[i,3]<- round(resabund[[i]]$R2/100,2)
modelAbund[i,4]<- length(dat1)
modelAbund[i,5]<- resabund[[i]]$fit.stats$ML[5]
}
modelAbund
modelAbund <- dplyr::arrange(modelAbund, AICc)
modelAbund$deltaAICc <- (modelAbund$AICc - min(modelAbund$AICc))
SUMDELTA <- sum(exp(-0.5*modelAbund$deltaAICc))
modelAbund$Weight <- exp(-0.5*modelAbund$deltaAICc)/SUMDELTA
View(modelAbund)
write.csv(modelAbund, "modelabund.csv")
Meta <- readRDS("Meta2.rds")
library(ggplot2)
library(metafor)
ggplot(Meta, aes(x=reorder(Fitness.measure,Fitness.measure, function(x)-length(x)))) + geom_bar() + xlab("Performance measure") + ylab("Number of studies") + theme_classic()
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
#### Names
Cols <- c("Order", "Functional group", "Treatment Type", "Neonic")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Abundance, vtype = "UB")
dat1
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
Abundance_g_kg <- dplyr::filter(Abundance, Application.Units == "g/kg")
Abundance_g_kg$TreatmentType
dat1$TreatmentType
dat1$Treatment.2
Behavior <- dplyr::filter(Meta, Fitness.measure == "behavior")
Behavior_ppb <- Behavior[!is.na(Behavior$T1_ppb),]
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Behavior_ppb, vtype = "UB")
ols <- c("Order", "Functional group", "Nesting Area", "Neonic", "Treatment Type", "Study Type", "Concentration [ppb]")
Cols <- c("Order", "Functional group", "Nesting Area", "Neonic", "Treatment Type", "Study Type", "Concentration [ppb]")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
id
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(Nesting.Area)", "factor(Treatment.2)", "factor(TreatmentType)", "factor(Study.Type)","T1_ppb")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
resbehav <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
resbehav <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
Behavior <- dplyr::filter(Meta, Fitness.measure == "behavior")
Behavior_ppb <- Behavior[!is.na(Behavior$T1_ppb),]
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Behavior_ppb, vtype = "UB")
dat1
condition <- dplyr::filter(Meta, Fitness.measure == "condition")
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=condition, vtype = "UB")
Cols <- c("Order", "Functional group", "Nesting Area", "Neonic", "Treatment Type", "Study Type")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(Nesting.Area)", "factor(Treatment.2)", "factor(TreatmentType)", "factor(Study.Type)")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
rescondition <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
modelCond <- data.frame(model = character(length(rescondition)), pvalue = numeric(length(rescondition)), R_squared = numeric(length(rescondition)), n = numeric(length(rescondition)), AICc = numeric(length(rescondition)), stringsAsFactors = FALSE)
for (i in 1:length(rescondition)){
modelCond[i,1]<- ModelNames[i]
modelCond[i,2]<- rescondition[[i]]$QMp
modelCond[i,3]<- round(rescondition[[i]]$R2/100,2)
modelCond[i,4]<- NROW(dat1)
modelCond[i,5]<- rescondition[[i]]$fit.stats$ML[5]
}
modelCond
condition <- dplyr::filter(Meta, Fitness.measure == "condition")
condition_ppb <- Reproduction[!is.na(condition$T1_ppb),]
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=condition, vtype = "UB")
Cols <- c("Order", "Functional group", "Nesting Area", "Neonic", "Treatment Type", "Study Type", "Concentration [ppb]")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(Nesting.Area)", "factor(Treatment.2)", "factor(TreatmentType)", "factor(Study.Type)", "T1_ppb")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
rescondition <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
modelCond <- data.frame(model = character(length(rescondition)), pvalue = numeric(length(rescondition)), R_squared = numeric(length(rescondition)), n = numeric(length(rescondition)), AICc = numeric(length(rescondition)), stringsAsFactors = FALSE)
for (i in 1:length(rescondition)){
modelCond[i,1]<- ModelNames[i]
modelCond[i,2]<- rescondition[[i]]$QMp
modelCond[i,3]<- round(rescondition[[i]]$R2/100,2)
modelCond[i,4]<- NROW(dat1)
modelCond[i,5]<- rescondition[[i]]$fit.stats$ML[5]
}
head(modelCond)
condition <- dplyr::filter(Meta, Fitness.measure == "condition")
condition_ppb <- condition[!is.na(condition$T1_ppb),]
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=condition, vtype = "UB")
Cols <- c("Order", "Functional group", "Nesting Area", "Neonic", "Treatment Type", "Study Type", "Concentration [ppb]")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(Nesting.Area)", "factor(Treatment.2)", "factor(TreatmentType)", "factor(Study.Type)", "T1_ppb")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
rescondition <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
modelCond <- data.frame(model = character(length(rescondition)), pvalue = numeric(length(rescondition)), R_squared = numeric(length(rescondition)), n = numeric(length(rescondition)), AICc = numeric(length(rescondition)), stringsAsFactors = FALSE)
for (i in 1:length(rescondition)){
modelCond[i,1]<- ModelNames[i]
modelCond[i,2]<- rescondition[[i]]$QMp
modelCond[i,3]<- round(rescondition[[i]]$R2/100,2)
modelCond[i,4]<- NROW(dat1)
modelCond[i,5]<- rescondition[[i]]$fit.stats$ML[5]
}
modelCond <- dplyr::arrange(modelCond, AICc)
modelCond$deltaAICc <- (modelCond$AICc - min(modelCond$AICc))
SUMDELTA <- sum(exp(-0.5*modelCond$deltaAICc))
modelCond$Weight <- exp(-0.5*modelCond$deltaAICc)/SUMDELTA
modelCond <- dplyr::filter(modelCond, deltaAICc < 5)
modelCond
condition <- dplyr::filter(Meta, Fitness.measure == "condition")
condition_ppb <- condition[!is.na(condition$T1_ppb),]
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=condition_ppb, vtype = "UB")
dat1$Order
dat1$Functional.group
dat1$Nesting.Area
dat1$Treatment.2
dat1$Study.Type
condition <- dplyr::filter(Meta, Fitness.measure == "condition")
condition_ppb <- condition[!is.na(condition$T1_ppb),]
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=condition_ppb, vtype = "UB")
Cols <- c("Order", "Functional group", "Nesting Area", "Neonic", "Treatment Type", "Study Type", "Concentration [ppb]")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(Nesting.Area)", "factor(Treatment.2)", "factor(TreatmentType)", "factor(Study.Type)", "T1_ppb")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
rescondition <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
unique(dat1$Order)
unique(dat1$Functional.group)
unique(dat1$Nesting.Area)
unique(dat1$Treatment.2)
unique(dat1$TreatmentType)
Meta <- readRDS("Meta2.rds")
library(ggplot2)
library(metafor)
Meta <- readRDS("Meta2.rds")
library(ggplot2)
library(metafor)
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
#### Names
Cols <- c("Order", "Functional group", "Treatment Type", "Neonic", "Nesting Area")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Abundance, vtype = "UB")
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(TreatmentType)", "factor(Treatment.2)", "factor(Nesting.Area)")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
resabund <- lapply(Formulas,function(i)
rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =as.formula(i), slab = paste(dat1$Authors, dat1$Year))
)
res1 <- rma(yi, vi, data=dat1, refline = 0, method = "HE", mods =~  factor(Functional.group), slab = paste(dat1$Authors, dat1$Year))
modelAbund <- data.frame(model = character(length(resabund)), pvalue = numeric(length(resabund)), R_squared = numeric(length(resabund)), n = numeric(length(resabund)), AICc = numeric(length(resabund)), stringsAsFactors = FALSE)
for (i in 1:length(resabund)){
modelAbund[i,1]<- ModelNames[i]
modelAbund[i,2]<- resabund[[i]]$QMp
modelAbund[i,3]<- round(resabund[[i]]$R2/100,2)
modelAbund[i,4]<- NROW(dat1)
modelAbund[i,5]<- resabund[[i]]$fit.stats$ML[5]
}
unique(Abundance$Functional.group)
unique(Abundance$TreatmentType)
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
Abundance_kg_ha <- dplyr::filter(Abundance, Application.Units == "kg/ha")
Abundance_kg_ha <- dplyr::filter(Abundance_kg_ha, TreatmentType == "powder/granular")
#### Names
Cols <- c("Order", "Functional group", "Nesting Area", "Concentration [Kg/Ha]")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
id
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Abundance_kg_ha, vtype = "UB")
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(Nesting.Area)", "AI.Rate_T1")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
id
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
Formulas
Abundance <- dplyr::filter(Meta, Fitness.measure == "abundance")
Abundance_g_kg <- dplyr::filter(Abundance, Application.Units == "g/kg")
dat1 <- escalc(measure="SMDH", m2i=Con_Mean, sd2i=Con_SE, n2i=Study.control..n., m1i=T1_Mean, sd1i=T1_SE, n1i=Study.T1..n., data=Abundance_g_kg, vtype = "UB")
Cols <- c("Order", "Functional group", "Nesting Area", "Concentration [g/Kg]")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
ModelNames <- sapply(id,function(i)
paste("y~",paste(Cols[i],collapse="+"))
)
id
ModelNames
ModelNames
grep("Conc", ModelNames)
ModelNames[grep("Conc", ModelNames)]
Cols <- c("factor(Order)", "factor(Functional.group)", "factor(Nesting.Area)", "AI.Rate_T1")
n <- length(Cols)
id <- unlist(
lapply(1:n,
function(i)combn(1:n,i,simplify=FALSE)
)
,recursive=FALSE)
Formulas <- sapply(id,function(i)
paste("~",paste(Cols[i],collapse="+"))
)
Formulas
