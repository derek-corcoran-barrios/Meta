{
    "collab_server" : "",
    "contents" : "library(ggmap)\nplumas <- get_map(location = \"Quincy, ca\", zoom = 9)\n\n\nlibrary(gridExtra)\nlibrary(grid)\nlibrary(ggplot2)\nlibrary(lattice)\nlibrary(reshape2)\nlibrary(ggthemr)\nlibrary(lubridate)\nlibrary(unmarked)\nlibrary(caret)\nlibrary(ggplot2)\nlibrary(texreg)\n#load each species model\nbest2.My.Th2 <- readRDS(\"best2.My.Th2.rds\")\nbest2.Ta.Br2 <- readRDS(\"best2.Ta.Br2.rds\")\nbest2.Pa.He2 <- readRDS(\"best2.Pa.He2.rds\")\nbest2.My.Yu2 <- readRDS(\"best2.My.Yu2.rds\")\nbest2.My.Lu2 <- readRDS(\"best2.My.Lu2.rds\")\nbest2.My.Ev2 <- readRDS(\"best2.My.Ev2.rds\")\nbest2.My.Ca2 <- readRDS(\"best2.My.Ca2.rds\")\nbest2.My.Ci2 <- readRDS(\"best2.My.Ci2.rds\")\nbest2.La.No2 <- readRDS(\"best2.La.No2.rds\")\nbest2.La.Ci2 <- readRDS(\"best2.La.Ci2.rds\")\nbest2.La.Bl2 <- readRDS(\"best2.La.Bl2.rds\")\nbest2.Eu.Ma2 <- readRDS(\"best2.Eu.Ma2.rds\")\nbest2.Eu.Pe2 <- readRDS(\"best2.Eu.Pe2.rds\")\nbest2.Ep.Fu2 <- readRDS(\"best2.Ep.Fu2.rds\")\nbest2.An.Pa2 <- readRDS(\"best2.An.Pa2.rds\")\n\n#HeatMap detection\n\noccupancytable2 <- read.csv(\"~/LastBat/occupancytable2.csv\")\nrownames(occupancytable2) <- occupancytable2[,2]\n\noccupancytable2 <- occupancytable2[-18,-c(1,2,9)]\ncolnames(occupancytable2)<- c(\"Burn Basal\", \"Burn Basal^2\", \"Burn Canopy\", \"Burn Canopy^2\", \"Fire Distance\", \"Forest Distance\")\noccupancytable2$species <- rownames(occupancytable2)\ndfm <- melt(occupancytable2, id.vars=\"species\")\ndfm$sign <- ifelse(dfm$value > 0 , \"+\" , ifelse(dfm$value < 0, \"-\", \"\"))\n\n\np <- ggplot(dfm, aes(x=variable, y=species)) +  geom_tile(aes(fill=value), colour = \"black\") + scale_fill_gradient2(low = \"blue\", high = 'red', name=\"Strength\") + theme(axis.text.x = element_text(angle = 50, hjust = 1, vjust = 1))+ geom_text(aes(label=sign), color = 'black')\n\n###Barplot\n\nsummarised_df1 <- readRDS(\"summarised_df1.rds\")\n\nggthemr(\"chalk\", type=\"outer\", layout=\"clear\", spacing=1)\n\nmean_fire <- summarised_df1$mean[rep(seq(from = 2, to = 34, by = 2), each = 2)]\nlimits <- aes(ymax = mean + std_error, ymin=mean-std_error)\ng<-ggplot(summarised_df1,aes(y = mean, x = reorder(variable, -mean_fire), fill = FIRE))\ng<-g+geom_bar(stat = \"identity\",position = position_dodge(), size = 1.5)+ scale_fill_manual(values=c('#999999','#E69F00'))\ng<-g+geom_errorbar(limits,width=0.25,position = position_dodge(0.9)) + ylab(\"Occupancy\") + xlab(\"Species\")\n\n\n\n#Sampling map\n\ndatasp <-  read.csv(\"~/LastBat/Grandtotal.csv\")\ndatasp$Start.1 <- ymd(as.character(datasp$Start.1))\ndatasp$YEAR <- as.factor(as.character(year(datasp$Start.1)))\n\nPlumap <- ggmap(plumas) + scale_x_continuous(limits = c(-121.6945, -120.0407), expand = c(0, 0)) + scale_y_continuous(limits = c(39.36708, 40.31977)) + geom_point(aes(x = LONG, y = LAT, colour = YEAR), data = datasp, size = 3, alpha = 0.5) + scale_color_manual(values = c(\"yellow\", \"red\"))\n\n\n#Edge relationships\n\n#load prprocessing and variables\npreprocov <- readRDS(\"preprocov.rds\")\nsampling.cov <- readRDS(\"sampling.cov.rds\")\n\n#generate a dataframe filed with means called output\nmeans <- colMeans(sampling.cov, na.rm = TRUE)\noutput <- matrix(ncol=ncol(sampling.cov), nrow=65)\n\nfor(i in 1:ncol(sampling.cov)){\n  output[,i] <-  rep(means[i], times = 65)\n  \n}\noutput <- data.frame(output)\ncolnames(output) <- colnames(sampling.cov)\n\n##generate max min matrix\n\nmaxmin <- matrix(ncol=ncol(sampling.cov), nrow=2)\nrownames(maxmin) <- c(\"max\", \"min\")\ncolnames(maxmin) <- colnames(sampling.cov)\n\nfor(i in 1:ncol(sampling.cov)){\n  maxmin[1,i] <-  max(sampling.cov[,i], na.rm = TRUE)\n  maxmin[2,i] <-  min(sampling.cov[,i], na.rm = TRUE)\n}\n\n#generate dataframe of predictions with what happens inside the burned area\nOutputForest <- output\nOutputForest$forest_dist <- seq(from = min(sampling.cov$forest_dist, na.rm = TRUE), to = max(sampling.cov$forest_dist, na.rm = TRUE), length.out = 65)\nOutputForest$fire_dist <- 0\nBurnPredicted <- predict(best2.My.Th2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestmyth <- cbind(OutputForest, BurnPredicted)\n\n#generate dataframe of predictions with what happens in the forest\nOutputFire <- output\nOutputFire$fire_dist <- seq(from = min(sampling.cov$fire_dist, na.rm = TRUE), to = max(sampling.cov$fire_dist, na.rm = TRUE), length.out = 65)\nOutputFire$forest_dist <- 0\nOutputFire$Burn.intensity.Canopy <- 0\nOutputFire$Burn.intensity.basal <- 0\nOutputFire$Burn.intensity.soil <- 0\nFirePredicted <- predict(best2.My.Th2, type = \"state\", predict(preprocov, OutputFire))\nOutputFiremyth <- cbind(OutputFire, FirePredicted)\n\n#Join and make inside of fire negative\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestmyth$forest_dist[length(OutputForestmyth$forest_dist):1])*-1),exp(OutputFiremyth$fire_dist)), Occupancy = c(OutputForestmyth$Predicted[length(OutputForestmyth$forest_dist):1], OutputFiremyth$Predicted), lower = c(OutputForestmyth$lower[length(OutputForestmyth$forest_dist):1], OutputFiremyth$lower), upper = c(OutputForestmyth$upper[length(OutputForestmyth$forest_dist):1], OutputFiremyth$upper)) \n\n\n#MYTH\nmythresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ labs(title = \"MYTH\") + ylim(c(0,1)) + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n#Tabr\n\nBurnPredicted <- predict(best2.Ta.Br2, type = \"state\", predict(preprocov, OutputForest))\nOutputForesttabr <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.Ta.Br2, type = \"state\", predict(preprocov, OutputFire))\nOutputFiretabr <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForesttabr$forest_dist[length(OutputForesttabr$forest_dist):1])*-1),exp(OutputFiretabr$fire_dist)), Occupancy = c(OutputForesttabr$Predicted[length(OutputForesttabr$forest_dist):1], OutputFiretabr$Predicted), lower = c(OutputForesttabr$lower[length(OutputForesttabr$forest_dist):1], OutputFiretabr$lower), upper = c(OutputForesttabr$upper[length(OutputForesttabr$forest_dist):1], OutputFiretabr$upper)) \n\ntabrresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"TABR\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n#Pahe\n\nBurnPredicted <- predict(best2.Pa.He2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestpahe <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.Pa.He2, type = \"state\", predict(preprocov, OutputFire))\nOutputFirepahe <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestpahe$forest_dist[length(OutputForestpahe$forest_dist):1])*-1),exp(OutputFirepahe$fire_dist)), Occupancy = c(OutputForestpahe$Predicted[length(OutputForestpahe$forest_dist):1], OutputFirepahe$Predicted), lower = c(OutputForestpahe$lower[length(OutputForestpahe$forest_dist):1], OutputFirepahe$lower), upper = c(OutputForestpahe$upper[length(OutputForestpahe$forest_dist):1], OutputFirepahe$upper)) \n\npaheresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"PAHE\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n#Myyu\n\nBurnPredicted <- predict(best2.My.Yu2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestmyyu <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.My.Yu2, type = \"state\", predict(preprocov, OutputFire))\nOutputFiremyyu <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestmyyu$forest_dist[length(OutputForestmyyu$forest_dist):1])*-1),exp(OutputFiremyyu$fire_dist)), Occupancy = c(OutputForestmyyu$Predicted[length(OutputForestmyyu$forest_dist):1], OutputFiremyyu$Predicted), lower = c(OutputForestmyyu$lower[length(OutputForestmyyu$forest_dist):1], OutputFiremyyu$lower), upper = c(OutputForestmyyu$upper[length(OutputForestmyyu$forest_dist):1], OutputFiremyyu$upper)) \n\nmyyuresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"MYYU\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n#Mylu\n\nBurnPredicted <- predict(best2.My.Lu2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestmylu <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.My.Lu2, type = \"state\", predict(preprocov, OutputFire))\nOutputFiremylu <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestmylu$forest_dist[length(OutputForestmylu$forest_dist):1])*-1),exp(OutputFiremylu$fire_dist)), Occupancy = c(OutputForestmylu$Predicted[length(OutputForestmylu$forest_dist):1], OutputFiremylu$Predicted), lower = c(OutputForestmylu$lower[length(OutputForestmylu$forest_dist):1], OutputFiremylu$lower), upper = c(OutputForestmylu$upper[length(OutputForestmylu$forest_dist):1], OutputFiremylu$upper)) \n\nmyluresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"MYLU\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n#Myev\n\nBurnPredicted <- predict(best2.My.Ev2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestmyev <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.My.Ev2, type = \"state\", predict(preprocov, OutputFire))\nOutputFiremyev <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestmyev$forest_dist[length(OutputForestmyev$forest_dist):1])*-1),exp(OutputFiremyev$fire_dist)), Occupancy = c(OutputForestmyev$Predicted[length(OutputForestmyev$forest_dist):1], OutputFiremyev$Predicted), lower = c(OutputForestmyev$lower[length(OutputForestmyev$forest_dist):1], OutputFiremyev$lower), upper = c(OutputForestmyev$upper[length(OutputForestmyev$forest_dist):1], OutputFiremyev$upper)) \n\nmyevresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"MYEV\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n#Myca\n\nBurnPredicted <- predict(best2.My.Ca2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestmyca <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.My.Ca2, type = \"state\", predict(preprocov, OutputFire))\nOutputFiremyca <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestmyca$forest_dist[length(OutputForestmyca$forest_dist):1])*-1),exp(OutputFiremyca$fire_dist)), Occupancy = c(OutputForestmyca$Predicted[length(OutputForestmyca$forest_dist):1], OutputFiremyca$Predicted), lower = c(OutputForestmyca$lower[length(OutputForestmyca$forest_dist):1], OutputFiremyca$lower), upper = c(OutputForestmyca$upper[length(OutputForestmyca$forest_dist):1], OutputFiremyca$upper)) \n\nmycaresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"MYCA\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n\n#Lano\n\nBurnPredicted <- predict(best2.La.No2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestlano <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.La.No2, type = \"state\", predict(preprocov, OutputFire))\nOutputFirelano <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestlano$forest_dist[length(OutputForestlano$forest_dist):1])*-1),exp(OutputFirelano$fire_dist)), Occupancy = c(OutputForestlano$Predicted[length(OutputForestlano$forest_dist):1], OutputFirelano$Predicted), lower = c(OutputForestlano$lower[length(OutputForestlano$forest_dist):1], OutputFirelano$lower), upper = c(OutputForestlano$upper[length(OutputForestlano$forest_dist):1], OutputFirelano$upper)) \n\nlanoresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"LANO\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n\n#Laci\n\nBurnPredicted <- predict(best2.La.Ci2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestlaci <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.La.Ci2, type = \"state\", predict(preprocov, OutputFire))\nOutputFirelaci <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestlaci$forest_dist[length(OutputForestlaci$forest_dist):1])*-1),exp(OutputFirelaci$fire_dist)), Occupancy = c(OutputForestlaci$Predicted[length(OutputForestlaci$forest_dist):1], OutputFirelaci$Predicted), lower = c(OutputForestlaci$lower[length(OutputForestlaci$forest_dist):1], OutputFirelaci$lower), upper = c(OutputForestlaci$upper[length(OutputForestlaci$forest_dist):1], OutputFirelaci$upper)) \n\nlaciresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"LACI\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n\n#Labl\n\nBurnPredicted <- predict(best2.La.Bl2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestlabl <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.La.Bl2, type = \"state\", predict(preprocov, OutputFire))\nOutputFirelabl <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestlabl$forest_dist[length(OutputForestlabl$forest_dist):1])*-1),exp(OutputFirelabl$fire_dist)), Occupancy = c(OutputForestlabl$Predicted[length(OutputForestlabl$forest_dist):1], OutputFirelabl$Predicted), lower = c(OutputForestlabl$lower[length(OutputForestlabl$forest_dist):1], OutputFirelabl$lower), upper = c(OutputForestlabl$upper[length(OutputForestlabl$forest_dist):1], OutputFirelabl$upper)) \n\nlablresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"LABL\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n\n#Euma\n\nBurnPredicted <- predict(best2.Eu.Ma2, type = \"state\", predict(preprocov, OutputForest))\nOutputForesteuma <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.Eu.Ma2, type = \"state\", predict(preprocov, OutputFire))\nOutputFireeuma <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForesteuma$forest_dist[length(OutputForesteuma$forest_dist):1])*-1),exp(OutputFireeuma$fire_dist)), Occupancy = c(OutputForesteuma$Predicted[length(OutputForesteuma$forest_dist):1], OutputFireeuma$Predicted), lower = c(OutputForesteuma$lower[length(OutputForesteuma$forest_dist):1], OutputFireeuma$lower), upper = c(OutputForesteuma$upper[length(OutputForesteuma$forest_dist):1], OutputFireeuma$upper)) \n\neumaresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"EUMA\") + theme(\n  panel.background = element_rect(fill = \"transparent\",colour = NA), # or theme_blank()\n  panel.grid.minor = element_blank(),\n  panel.grid.major = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)\n)+\n  theme(axis.line.x = element_line(color=\"black\", size = 0.5),\n        axis.line.y = element_line(color=\"black\", size = 0.5))+ geom_vline(xintercept = 0, linetype = \"longdash\")\n\n\n#Epfu\n\nBurnPredicted <- predict(best2.Ep.Fu2, type = \"state\", predict(preprocov, OutputForest))\nOutputForestepfu <- cbind(OutputForest, BurnPredicted)\nFirePredicted <- predict(best2.Ep.Fu2, type = \"state\", predict(preprocov, OutputFire))\nOutputFireepfu <- cbind(OutputFire, FirePredicted)\n\nEdgeOutput <- data.frame(Distance = c((exp(OutputForestepfu$forest_dist[length(OutputForestepfu$forest_dist):1])*-1),exp(OutputFireepfu$fire_dist)), Occupancy = c(OutputForestepfu$Predicted[length(OutputForestepfu$forest_dist):1], OutputFireepfu$Predicted), lower = c(OutputForestepfu$lower[length(OutputForestepfu$forest_dist):1], OutputFireepfu$lower), upper = c(OutputForestepfu$upper[length(OutputForestepfu$forest_dist):1], OutputFireepfu$upper)) \n\nepfuresp <- ggplot(EdgeOutput, aes(x = Distance, y = Occupancy))  + geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.5) + geom_line(size = 1)+ ylim(c(0,1))+ labs(title = \"EPFU\") + geom_vline(xintercept = 0, linetype = \"longdash\")\n\n\n\n#combine plots\n\n\nEdgy <- grid.arrange(mythresp, tabrresp, myevresp, mycaresp, lanoresp, laciresp, lablresp, epfuresp, eumaresp, myluresp, myyuresp, paheresp, ncol = 3)\n\n\n\n#TEXTS\n\nTitle <- textGrob(paste(\"Burn, Baby, Burn: Effects of Wildfire on Bat Species Occupancy\", \"Probability in the Sierra Nevada Mountains\", sep =\"\\n\"),gp=gpar(fontsize=72))\n\nBackground <- textGrob(\"Background\",gp=gpar(fontsize=40))\n\nintro <- textGrob(paste(\"Increasing wildfire frequency and severity in the Western United States\", \n                        \"emphasizes the importance of understanding how fire-mediated habitat\", \n                        \"changes affect biodiversity. In particular, it is unknown how bat habitat\",\n                        \"use is affected by fire intensity and its spatial structure.\",\n                        \"\\n\",\n                        \"We measured fire intensity as differenced normalized burn ratios (DNBR)\", \n                        \"and the distance from and to the limit of the burned area within the\",\n                        \"forest matrix, and evaluated how this factors affected the occupancy of\",\n                        \"17 bat species in northern California.\", sep = \"\\n\"),gp=gpar(fontsize=30), just = c(\"center\", \"top\"))\n#ARRANGE\n\nlay <- rbind(c(1,1,1,1,1,1),\n             c(5,5,4,7,7,7),\n             c(6,6,6,7,7,7),\n             c(6,6,6,7,7,7),\n             c(6,6,6,NA,NA,NA),\n             c(2,2,3,3,3,NA),\n             c(2,2,3,3,3,NA))\n\nmain=textGrob(paste(\"titleLine1\", \"titleLine2\", sep = \"\\n\"),gp=gpar(fontsize=20))\n##############Posterize\n\ngrid.arrange(Title, Plumap, g, p, Background, intro, Edgy, layout_matrix = lay)\n",
    "created" : 1478563085836.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4257584065",
    "id" : "BE18715C",
    "lastKnownWriteTime" : 1478278622,
    "last_content_update" : 1478563173199,
    "path" : "~/LastBat/Poster.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}