{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Community Analysis Hymenoptera\"\nauthor: \"Anson Main and Derek Corcoran\"\ndate: \"October 5, 2016\"\noutput:\n  pdf_document:\n    fig_caption: yes\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\nlibrary(ggplot2)\nlibrary(vegan)\nlibrary(stargazer)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(glmulti)\nlibrary(lme4)\nlibrary(MuMIn)\nlibrary(texreg)\n```\n\n#Data\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\nBeeDiversity <- read.csv(\"~/Metanalysis/SiteMeasures_New.csv\")\nBeesOnly <- BeeDiversity[,18:84]\nrow.names(BeesOnly) <- make.names(BeeDiversity$FieldID, unique = TRUE)\n\nBeeDiversity$FieldID <- substr(BeeDiversity$FieldID, 0 ,2)\nBeesManagement <-BeeDiversity[,1:17]\nBeesManagement$ID <- paste(BeesManagement$FieldID, BeesManagement$Jdate, \"\")\n\n\n```\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Anosim analisis between Treated and Untreated Fields\"}\nBees.dist <- vegdist(BeesOnly)\nBees.ano <- anosim(Bees.dist, BeesManagement$Treatment)\nplot(Bees.ano)\n```\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Anosim analisis between different management areas\"}\nBees.ano2 <- anosim(Bees.dist, BeesManagement$ID)\nplot(Bees.ano2)\n```\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}\nexample_NMDS=metaMDS(BeesOnly,k=2,trymax=100)\n```\n\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\n\n\ndata.scores <- as.data.frame(scores(example_NMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame\ndata.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores\ndata.scores <- cbind(data.scores, BeesManagement)  #  add the grp variable created earlier\n```\n##NMDS Treated Untreated\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\ngrp.T <- data.scores[data.scores$Treatment == \"treated\", ][chull(data.scores[data.scores$Treatment == \"treated\", c(\"NMDS1\", \"NMDS2\")]), ]  # hull values for grp Treatment\ngrp.U <- data.scores[data.scores$Treatment == \"untreated\", ][chull(data.scores[data.scores$Treatment == \"untreated\", c(\"NMDS1\", \"NMDS2\")]), ]  # hull values for grp B\n\nhull.data <- rbind(grp.T, grp.U)  #combine grp.a and grp.b\n```\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Multidimensional Scaling Showing the Overlap of communities between treated and untreated areas\"}\n\nggplot()+  geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=Treatment,group=Treatment),alpha=0.30) + # add the convex hulls\ngeom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=FieldID,colour=Crop),size=4) + \ncoord_equal() +\ntheme_bw() + \ntheme(axis.text.x = element_blank(),  # remove x-axis text\n       axis.text.y = element_blank(), # remove y-axis text\n       axis.ticks = element_blank(),  # remove axis ticks\n       axis.title.x = element_text(size=18), # remove x-axis labels\n       axis.title.y = element_text(size=18), # remove y-axis labels\n       panel.background = element_blank(), \n       panel.grid.major = element_blank(),  #remove major-grid labels\n      panel.grid.minor = element_blank(),  #remove minor-grid labels\n       plot.background = element_blank())\n \n```\n\n\n##NMDS Management Areas\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\ngrp.AT <- data.scores[data.scores$FieldID == \"AT\", ][chull(data.scores[data.scores$FieldID == \"AT\", c(\"NMDS1\", \"NMDS2\")]), ]  # hull values for grp Treatment\ngrp.FG <- data.scores[data.scores$FieldID == \"FG\", ][chull(data.scores[data.scores$FieldID == \"FG\", c(\"NMDS1\", \"NMDS2\")]), ]  # hull values for grp B\ngrp.IH <- data.scores[data.scores$FieldID == \"IH\", ][chull(data.scores[data.scores$FieldID == \"IH\", c(\"NMDS1\", \"NMDS2\")]), ]  # hull values for grp Treatment\ngrp.WC <- data.scores[data.scores$FieldID == \"WC\", ][chull(data.scores[data.scores$FieldID == \"WC\", c(\"NMDS1\", \"NMDS2\")]), ]  # hull values for grp B\n\nsite.hull.data <- rbind(grp.AT, grp.FG, grp.IH, grp.WC)  #combine grp.a and grp.b\n```\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Multidimensional Scaling Showing the Overlap of communities between Management Areas\"}\n\nggplot()+  geom_polygon(data=site.hull.data,aes(x=NMDS1,y=NMDS2,fill=FieldID,group=FieldID),alpha=0.30) + # add the convex hulls\ngeom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=Treatment,colour=Crop),size=4) + \ncoord_equal() + \n  theme_bw() + \ntheme(axis.text.x = element_blank(),  # remove x-axis text\n        axis.text.y = element_blank(), # remove y-axis text\n        axis.ticks = element_blank(),  # remove axis ticks\n        axis.title.x = element_text(size=18), # remove x-axis labels\n        axis.title.y = element_text(size=18), # remove y-axis labels\n        panel.background = element_blank(), \n        panel.grid.major = element_blank(),  #remove major-grid labels\n        panel.grid.minor = element_blank(),  #remove minor-grid labels\n        plot.background = element_blank())\n\n```\n\n#Alpha diversity\n\n```{r, echo=FALSE, fig.cap= \"Alpha diversity grouped by site and Treatment\"}\nBeesOnly[BeesOnly== 0]<- NA\nAlpharesults <- cbind(BeesManagement,exp(rowSums(log(BeesOnly), na.rm = TRUE)/rowSums(ifelse(is.na(BeesOnly), 0 , 1))))\ncolnames(Alpharesults) <- c(colnames(Alpharesults)[1:18],\"Geometric\")\nggplot(Alpharesults, aes(x = ID, y = Geometric))+ geom_boxplot(aes(color = Treatment))\n\nAlphasummary <- group_by(Alpharesults, ID, Treatment)\nAlphasummary <- summarize(Alphasummary, Median = median(Geometric),Mean = mean(Geometric), SD = sd(Geometric))\n\nkable(Alphasummary)\n```\n\n```{r, echo=FALSE, fig.cap= \"Alpha diversity grouped by site and Treatment\"}\ndodge <- position_dodge(width=0.9)\n\nggplot(Alphasummary, aes(x = ID, y = Median)) + geom_bar(position = \"dodge\",stat = \"identity\", aes(fill = Treatment))\n```\n\n```{r, echo=FALSE}\nlibrary(lubridate)\nAlpharesults$CollectTime <- as.numeric(hm(Alpharesults$CollectTime))\nAlpharesults$WindSpd <- as.numeric(Alpharesults$WindSpd)\nAlpharesults$Temp <- as.numeric(Alpharesults$Temp)\nAlpharesults$Humidity <- as.numeric(Alpharesults$Humidity)\n```\n\n\n```{r, echo=FALSE, cache=TRUE, results='hide'}\nAlpharesults <- filter(Alpharesults, Crop != \"sunflowers\")\nglmalpha <- glm(Geometric~., data = Alpharesults[,-18])\noptions(na.action = \"na.fail\")\nglmalpha<- dredge(glmalpha)\n```\n\n\n```{r, echo=FALSE, cache=FALSE, results='asis'}\ntexreg(extract(subset(glmalpha, delta <= 2, recalc.weights = TRUE)))\n```\n\n```{r, echo=FALSE, cache=TRUE, results='hide', warning=FALSE, message=FALSE}\nAlpharesults[,4:17] <- scale(Alpharesults[,4:17])\nlme.model2  =  lmer(Geometric~ Treatment + FieldArea + MargArea + AvgMgWidth + CtoMEdge + DistNearTr+ I(Jdate^2) + DaysSinceP + PercMgMow + AvgFlCover + NumSpBloom + CollectTime + Temp + Humidity + WindSpd + (1|FieldID) + (1|Crop), data = Alpharesults)\noptions(na.action = \"na.fail\")\nset.lme <-dredge(lme.model2)\n```\n\n```{r, echo=FALSE, cache=TRUE, results='asis'}\nhtmlreg(extract(subset(set.lme, delta <= 2, recalc.weights = TRUE)), file = \"lme.doc\", digits = 3)\n```\n\n\n```{r}\nggplot(Alpharesults, aes(x = Jdate, y = Geometric)) + geom_point(aes(color=Treatment, shape = FieldID))\n```",
    "created" : 1475700279996.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3280262911",
    "id" : "94D443C4",
    "lastKnownWriteTime" : 1476288301,
    "last_content_update" : 1476288301953,
    "path" : "~/Metanalysis/Bee2.Rmd",
    "project_path" : "Bee2.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}